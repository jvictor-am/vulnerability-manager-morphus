// Tela de Detalhes de um Host expecífico(ex.: 1)
// ex.: (http://vulnerability-manager-jv.herokuapp.com/host/1)

/* eslint-disable react/button-has-type */
/* eslint-disable react/jsx-props-no-spreading */
/* eslint-disable react/prop-types */
import React from 'react';
import { Link, useParams } from 'react-router-dom';
import {
  useTable,
  useExpanded,
  useFilters,
  useGlobalFilter,
  usePagination,
} from 'react-table';

import matchSorter from 'match-sorter';

import { Icon, Button } from 'semantic-ui-react';
import { toast } from 'react-toastify';
import { ContainerIcon, Title, Styles } from './styles';

import api from '~/services/api';

// Função que apresenta contagem dos registros
// Define a default UI for filtering
function GlobalFilter({ preGlobalFilteredRows }) {
  const count = preGlobalFilteredRows.length;

  return <div>{count} Registro(s)...</div>;
}

// Filtro utilizado na confecção da Tabela
// Define a default UI for filtering
function DefaultColumnFilter({
  column: { filterValue, preFilteredRows, setFilter },
}) {
  const count = preFilteredRows.length;

  return (
    <input
      value={filterValue || ''}
      onChange={(e) => {
        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely
      }}
      placeholder={`Total de ${count} registros...`}
    />
  );
}

// Filtro utilizado na(s) coluna(s) da Tabela
function fuzzyTextFilterFn(rows, id, filterValue) {
  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });
}

// Let the table remove the filter if the string is empty
fuzzyTextFilterFn.autoRemove = (val) => !val;

// Componente utilizado para "montar" a tabela (pacote react-table)
function Table({ columns, data }) {
  const filterTypes = React.useMemo(
    () => ({
      // Add a new fuzzyTextFilterFn filter type.
      fuzzyText: fuzzyTextFilterFn,
      // Or, override the default text filter to use
      // "startWith"
      text: (rows, id, filterValue) => {
        return rows.filter((row) => {
          const rowValue = row.values[id];
          return rowValue !== undefined
            ? String(rowValue)
                .toLowerCase()
                .startsWith(String(filterValue).toLowerCase())
            : true;
        });
      },
    }),
    []
  );

  const defaultColumn = React.useMemo(
    () => ({
      // Let's set up our default Filter UI
      Filter: DefaultColumnFilter,
    }),
    []
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    page,
    canPreviousPage,
    canNextPage,
    pageOptions,
    pageCount,
    gotoPage,
    nextPage,
    previousPage,
    setPageSize,
    state: { pageIndex, pageSize },
    state,
    visibleColumns,
    preGlobalFilteredRows,
    setGlobalFilter,
  } = useTable(
    {
      columns,
      data,
      defaultColumn, // Be sure to pass the defaultColumn option
      filterTypes,
      initialState: { pageIndex: 0 },
    },
    useFilters, // useFilters!
    useGlobalFilter, // useGlobalFilter!
    useExpanded,
    usePagination
  );

  return (
    <>
      <table {...getTableProps()}>
        <thead>
          {headerGroups.map((headerGroup) => (
            <>
              <tr {...headerGroup.getHeaderGroupProps()}>
                {headerGroup.headers.map((column) => (
                  <>
                    <th {...column.getHeaderProps()}>
                      {column.render('Header')}
                      {/* Render the columns filter UI */}
                      <div>
                        {column.canFilter ? column.render('Filter') : null}
                      </div>
                    </th>
                  </>
                ))}
              </tr>
            </>
          ))}
          <tr>
            <th colSpan={visibleColumns.length}>
              <GlobalFilter
                preGlobalFilteredRows={preGlobalFilteredRows}
                globalFilter={state.globalFilter}
                setGlobalFilter={setGlobalFilter}
              />
            </th>
          </tr>
          <tr className="info">
            <th colSpan={visibleColumns.length}>
              <div style={{ color: '#fff' }}>
                Para listar os hosts afetados por uma vulnerabilidade NÃO
                corrigida clique em sua respectiva linha
              </div>
            </th>
          </tr>
        </thead>
        <tbody {...getTableBodyProps()}>
          {page.map((row, i) => {
            prepareRow(row);
            return (
              <tr {...row.getRowProps()}>
                {row.cells.map((cell) => {
                  if (cell.column.id === 'expander') {
                    return (
                      <td {...cell.getCellProps()} id={cell.row.original[0]}>
                        {cell.render('Cell')}
                      </td>
                    );
                  }
                  return (
                    <td {...cell.getCellProps()}>
                      <Link to={`/vulnerability/${cell.row.original[0]}`}>
                        {cell.render('Cell')}
                      </Link>
                    </td>
                  );
                })}
              </tr>
            );
          })}
        </tbody>
      </table>
      {/* Paginação */}
      <div className="pagination">
        <div className="left-group">
          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>
            <Icon name="angle double left" size="large" />
          </button>{' '}
          <button onClick={() => previousPage()} disabled={!canPreviousPage}>
            <Icon name="angle left" size="large" />
          </button>{' '}
          <button onClick={() => nextPage()} disabled={!canNextPage}>
            <Icon name="angle right" size="large" />
          </button>{' '}
          <button
            onClick={() => gotoPage(pageCount - 1)}
            disabled={!canNextPage}
          >
            <Icon name="angle double right" size="large" />
          </button>{' '}
          <select
            value={pageSize}
            onChange={(e) => {
              setPageSize(Number(e.target.value));
            }}
          >
            {[10, 20, 30, 40, 50].map((pageSizeSelect) => (
              <option key={pageSizeSelect} value={pageSizeSelect}>
                Mostrar {pageSizeSelect}
              </option>
            ))}
          </select>
        </div>
        <div className="right">
          <span>
            | Página{' '}
            <strong>
              {pageIndex + 1} de {pageOptions.length}
            </strong>{' '}
          </span>
          <span>
            Ir para página:{' '}
            <input
              type="number"
              defaultValue={pageIndex + 1}
              onChange={(e) => {
                const pageInput = e.target.value
                  ? Number(e.target.value) - 1
                  : 0;
                gotoPage(pageInput);
              }}
              style={{ width: '50px' }}
            />
          </span>{' '}
        </div>
      </div>
    </>
  );
}

function DetailedHost() {
  const [host, setHost] = React.useState('');
  const [ipAddress, setIpAddress] = React.useState('');
  const [risk, setRisk] = React.useState('');
  const [vulnNaoCorr, setVulnNaoCorr] = React.useState([]);
  const [vulnCorr, setVulnCorr] = React.useState([]);

  const { id } = useParams();

  React.useEffect(() => {
    async function loadHost() {
      try {
        const totalHosts = await api.get(`/api/assets/${id}`);

        const arrVulnNaoCorr = totalHosts.data.vuln;

        const vulnKey = arrVulnNaoCorr.map((item) => [item, '** NÃO **']);

        const entries = vulnKey.map((item) => ({ ...item }));

        const arrVulnCorr = totalHosts.data.vuln_fixed;

        const vulnCorrKey = arrVulnCorr.map((item) => [item, 'SIM']);

        const entriesCorr = vulnCorrKey.map((item) => ({ ...item }));

        setVulnNaoCorr(entries);
        setVulnCorr(entriesCorr);
        setHost(totalHosts.data.hostname);
        setIpAddress(totalHosts.data.ip_address);
        setRisk(totalHosts.data.risk);
      } catch (err) {
        toast.error(
          'Falha no carregamento dos dados. Atualize a página ou entre em contato com a equipe de TI.'
        );
      }
    }

    loadHost();
  }, [id]);

  // Função que atualiza status de uma vulnerabilidade para corrigida
  async function UpdateToFixed(vulnIdToUpdate) {
    try {
      await api.patch(
        `api/vulnerability/${vulnIdToUpdate.cell.value}/asset/${id}/update`,
        {
          status: '0',
        }
      );

      toast.success(
        `Vulnerabilidade de id ${vulnIdToUpdate.cell.value} atualizada para CORRIGIDA`
      );

      setTimeout(() => window.location.reload(true), 4000);
    } catch (err) {
      toast.error(
        'Não foi possível atualizar o status da vulnerabilidade. Entre em contato com a equipe de TI.'
      );
    }
  }

  // Função que atualiza status de uma vulnerabilidade para NÃO corrigida
  async function UpdateToUnfixed(vulnIdToUpdate) {
    try {
      await api.patch(
        `api/vulnerability/${vulnIdToUpdate.cell.value}/asset/${id}/update`,
        {
          status: '1',
        }
      );

      toast.success(
        `Vulnerabilidade de id ${vulnIdToUpdate.cell.value} atualizada para NÃO CORRIGIDA`
      );

      setTimeout(() => window.location.reload(true), 4000);
    } catch (err) {
      toast.error(
        'Não foi possível atualizar o status da vulnerabilidade. Entre em contato com a equipe de TI.'
      );
    }
  }

  const columns = React.useMemo(
    () => [
      {
        Header: `|| Risco: ${risk} || Endereço de IP: ${ipAddress} ||`,
        columns: [
          {
            Header: 'Vulnerabilidades',
            accessor: '0',
          },
          {
            Header: 'Vulnerabilidade CORRIGIDA ?',
            accessor: '1',
            // Use our custom `fuzzyText` filter on this column
            filter: 'fuzzyText',
          },
        ],
      },
      {
        // Renderiza os botões na coluna
        Header: `Coluna para atualização do status da Vulnerabilidade. Marcar como Corrigida?`, // No header
        id: 'expander', // It needs an ID
        accessor: '0',
        Cell: (value) => (
          <Button.Group>
            <Button positive onClick={() => UpdateToFixed(value)}>
              SIM
            </Button>
            <Button negative onClick={() => UpdateToUnfixed(value)}>
              NÃO
            </Button>
          </Button.Group>
        ),
      },
    ],
    [ipAddress, risk]
  );

  const data = vulnNaoCorr.concat(vulnCorr);

  return (
    <>
      <ContainerIcon>
        <Link to="/hosts">
          <Icon
            name="arrow alternate circle left outline"
            size="big"
            color="#ff4600"
          />
        </Link>
      </ContainerIcon>
      <Title>
        <h1>Detalhes do Host: {host}</h1>
      </Title>
      <Styles>
        <Table columns={columns} data={data} />
      </Styles>
    </>
  );
}

export default DetailedHost;
