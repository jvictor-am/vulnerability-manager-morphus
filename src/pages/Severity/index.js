// Tela de Listagem de todas as Vulnerabilidades de determinada Severidade(ex.: Médio)
// ex.: (http://vulnerability-manager-jv.herokuapp.com/severity/M%C3%A9dio)

/* eslint-disable eqeqeq */
/* eslint-disable react/button-has-type */
/* eslint-disable react/jsx-props-no-spreading */
/* eslint-disable react/prop-types */
import React from 'react';
import { useParams, useHistory } from 'react-router-dom';
import {
  useTable,
  useFilters,
  useGlobalFilter,
  usePagination,
} from 'react-table';

import matchSorter from 'match-sorter';

import { Icon } from 'semantic-ui-react';
import { ContainerIcon, Title, Styles } from './styles';
import api from '~/services/api';

// Função que apresenta contagem dos registros
// Define a default UI for filtering
function GlobalFilter({ preGlobalFilteredRows }) {
  const count = preGlobalFilteredRows.length;

  return <div>{count} Registro(s)...</div>;
}

// Filtro utilizado na confecção da Tabela
// Define a default UI for filtering
function DefaultColumnFilter({
  column: { filterValue, preFilteredRows, setFilter },
}) {
  const count = preFilteredRows.length;

  return (
    <input
      value={filterValue || ''}
      onChange={(e) => {
        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely
      }}
      placeholder={`Total de ${count} registros...`}
    />
  );
}

// Filtro utilizado na(s) coluna(s) da Tabela
function fuzzyTextFilterFn(rows, id, filterValue) {
  return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] });
}

// Let the table remove the filter if the string is empty
fuzzyTextFilterFn.autoRemove = (val) => !val;

// Our table component
function Table({ columns, data }) {
  const filterTypes = React.useMemo(
    () => ({
      // Add a new fuzzyTextFilterFn filter type.
      fuzzyText: fuzzyTextFilterFn,
      // Or, override the default text filter to use
      // "startWith"
      text: (rows, id, filterValue) => {
        return rows.filter((row) => {
          const rowValue = row.values[id];
          return rowValue !== undefined
            ? String(rowValue)
                .toLowerCase()
                .startsWith(String(filterValue).toLowerCase())
            : true;
        });
      },
    }),
    []
  );

  const defaultColumn = React.useMemo(
    () => ({
      // Let's set up our default Filter UI
      Filter: DefaultColumnFilter,
    }),
    []
  );

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    prepareRow,
    state,
    visibleColumns,
    preGlobalFilteredRows,
    setGlobalFilter,
  } = useTable(
    {
      columns,
      data,
      defaultColumn, // Be sure to pass the defaultColumn option
      filterTypes,
      initialState: { pageIndex: 0 },
    },
    useFilters, // useFilters!
    useGlobalFilter, // useGlobalFilter!
    usePagination
  );

  // constante utilizada para renderizar 50 colunas (justamente o que a API retorna por página)
  const firstPageRows = rows.slice(0, 50);

  return (
    <>
      <table {...getTableProps()}>
        <thead>
          {headerGroups.map((headerGroup) => (
            <tr {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map((column) => (
                <th {...column.getHeaderProps()}>
                  {column.render('Header')}
                  {/* Render the columns filter UI */}
                  <div>{column.canFilter ? column.render('Filter') : null}</div>
                </th>
              ))}
            </tr>
          ))}
          <tr>
            <th colSpan={visibleColumns.length}>
              <GlobalFilter
                preGlobalFilteredRows={preGlobalFilteredRows}
                globalFilter={state.globalFilter}
                setGlobalFilter={setGlobalFilter}
              />
            </th>
          </tr>
        </thead>
        <tbody {...getTableBodyProps()}>
          {firstPageRows.map((row, i) => {
            prepareRow(row);
            return (
              <tr {...row.getRowProps()}>
                {row.cells.map((cell) => {
                  return (
                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>
                  );
                })}
              </tr>
            );
          })}
        </tbody>
      </table>
    </>
  );
}

function Severity() {
  const [vuln, setVuln] = React.useState([]);
  const [page, setPage] = React.useState(1);
  const [severityNum, setSeverityNum] = React.useState(0);
  const [numVuln, setNumVuln] = React.useState(0);

  const { id } = useParams();

  // função que faz a correspondência das severidades de string para número
  // conforme informado pela API
  function severityToNumber(value) {
    if (value === 'Baixo') {
      setSeverityNum(1);
    } else if (value === 'Médio') {
      setSeverityNum(2);
    } else if (value === 'Alto') {
      setSeverityNum(3);
    } else if (value === 'Crítico') {
      setSeverityNum(4);
    }
  }

  const history = useHistory();

  React.useEffect(() => {
    async function loadSeverity() {
      severityToNumber(id);

      // evita chamar API quando estado ainda é zero (defalt = 0)
      if (severityNum !== 0) {
        const totalVuln = await api.get(
          `/api/vulnerabilities/?page=${page}&severity=${severityNum}`
        );

        setVuln(totalVuln.data.results);
        setNumVuln(totalVuln.data.count);
      }
    }

    loadSeverity();
  }, [id, page, severityNum]);

  const columns = React.useMemo(
    () => [
      {
        Header: ' ',
        columns: [
          {
            Header: 'Nome',
            accessor: 'title',
          },
          {
            Header: 'Severidade',
            accessor: 'severity',
            filter: 'fuzzyText',
          },
          {
            Header: 'CVSS',
            accessor: 'cvss',
            // Filter: NumberRangeColumnFilter,
            filter: 'includes',
          },
          {
            Header: 'Data de Publicação',
            accessor: 'publication_date',
            // Filter: SelectColumnFilter,
            filter: 'fuzzyText',
          },
          {
            Header: 'Quantidade de Hosts Afetados',
            accessor: 'asset_count',
            // Filter: SelectColumnFilter,
            filter: 'fuzzyText',
          },
        ],
      },
    ],
    []
  );

  const data = vuln;

  // constante que armazena número total de páginas (cada uma com 50 linhas)
  const numPages = Math.ceil(numVuln / 50);

  // função para avançar uma página
  function NextPage() {
    if (page == numPages) {
      setPage(numPages);
    } else {
      setPage(page + 1);
    }
  }

  // função para voltar uma página
  function PreviousPage() {
    if (page == 1) {
      setPage(1);
    } else {
      setPage(page - 1);
    }
  }

  // função para levar usuário à primaira página das vulnerabilidades
  function FirstPage() {
    setPage(1);
  }

  // função para levar usuário à última página das vulnerabilidades
  function LastPage() {
    setPage(numPages);
  }

  // função para o input da página, levando o mesmo à uma página específica
  function gotoPage(currentPage) {
    if (currentPage >= 6) {
      setPage(6);
    } else if (currentPage <= 1) {
      setPage(1);
    } else {
      setPage(currentPage);
    }
  }

  return (
    <>
      <ContainerIcon>
        <Icon
          name="arrow alternate circle left outline"
          size="big"
          // color="#ff4600"
          onClick={() => history.goBack()}
        />
      </ContainerIcon>
      <Title>
        <h1>Vulnerabilidades de Severidade: {id}</h1>
      </Title>
      <Styles>
        <Table columns={columns} data={data} />
        <div className="pagination">
          <div className="left-group">
            <button onClick={() => FirstPage()}>
              <Icon name="angle double left" size="large" />
            </button>{' '}
            <button onClick={() => PreviousPage()}>
              <Icon name="angle left" size="large" />
            </button>{' '}
            <button onClick={() => NextPage()}>
              <Icon name="angle right" size="large" />
            </button>{' '}
            <button onClick={() => LastPage()}>
              <Icon name="angle double right" size="large" />
            </button>{' '}
          </div>
          <div className="right">
            <span>
              | Página{' '}
              <strong>
                {page} de {numPages}
              </strong>{' '}
            </span>
            <span>
              Ir para página:{' '}
              <input
                type="number"
                defaultValue={1}
                onChange={(e) => {
                  const pageInput = e.target.value ? Number(e.target.value) : 0;
                  gotoPage(pageInput);
                }}
                style={{ width: '50px' }}
              />
            </span>{' '}
          </div>
        </div>
      </Styles>
    </>
  );
}

export default Severity;
